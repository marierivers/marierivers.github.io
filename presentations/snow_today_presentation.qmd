---
title: "Snow Today"
subtitle: "Improving usability of snow data through web based visualizations and tutorials"
author: "Marie Rivers"
date: "October 13, 2022"
format: 
  revealjs:
    theme: [default, presentation_styles.scss]
    slide-number: true
    preview-links: auto
    footer: <https://shiny.snow.ucsb.edu/snow_today_shiny_app/>>
    title-slide-attributes:
      data-background-color: "#447099"
editor: visual
---

```{r}
#| include: false
library(tidyverse)
library(leaflet)
library(kableExtra)
```

```{python}
#| include: false
import h5pyd
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from pyproj import Proj
import dateutil
import folium
import plotly.graph_objects as go
```

##  {background-image="images/snow_collage.jpg"}

::: {style="text-align: center"}
[Knowing the spatial extent of snow cover is critical for water management and winter recreation. Climate change will affect the variability of frozen water resources.]{.big_centered_text .absolute top="40%" width="100%"}
:::

##  {background-image="images/field_visit.jpg" background-size="100%"}

[Snow Science: UCSB CUES Field Station Site Visit]{.big_centered_text .absolute top="42%" width="100%"}

##  {background-image="images/albedo_example.jpg" background-size="95%"}

## Albedo Importance {.smaller}

::: columns
::: {.column width="60%"}
-   Regulates the Earth's temperature by reflecting solar radiation <br> <br>
-   Influences rate of snow melt <br> <br>
-   Particularly important in the Western US <br> <br>
-   Accurate estimates critical for climate models and predicting water storage
:::

::: {.column width="40%"}
![](images/dirty_snow1.jpg){.absolute top="50" right="0" width="400"}

![](images/dirty_snow2.png){.absolute bottom="50" right="0" width="400"}
:::
:::

## Snow Today {.smaller}

::: columns
::: {.column width="60%"}
-   Scientific analysis website that provides data on snow conditions from satellite and surface measurements <br> <br>
-   Used by scientists, water managers, and outdoor enthusiasts for snow observations <br> <br>
-   Spatial products offered include measures of snow cover extent and albedo
:::

::: {.column width="40%"}
![](images/existing_snow_today_website.png){width="505"}
:::
:::

## Snow Today: Usability {.smaller}

::: columns
::: {.column width="40%"}
![](images/snowy_mountain.png){width="366"}
:::

::: {.column width="60%"}
Snow Today can be [hard to navigate]{.yellow} for new users unfamiliar with the website's layout

Visualizations are of current snow conditions, and have [limited customization options]{.yellow}

Snow cover and albedo files are [hard to find]{.yellow}

Data format may be [challenging for new users]{.yellow}

Snow metadata is stored in a non-standardized format which is [difficult for some software to interpret]{.yellow} the data

Users may have [trouble processing and analyzing snow data]{.yellow} without the help
:::
:::

## Snow Today: Visualizations {.smaller}

::: columns
::: {.column width="50%"}
![](images/existing_vis1.png){width="564"}
:::

::: {.column width="50%"}
![](images/existing_vis2.png){width="562"}
:::
:::

## Objectives {.smaller}

::: columns
::: {.column width="30%"}
![](images/snowy_tree.jpg){width="338"}
:::

::: {.column width="70%"}
**Create an open source workflow for processing and visualizing snow data**

::: {.fragment fragment-index="1"}
::: {.fragment .highlight-blue fragment-index="4"}
1.  Provide recommendations for the Snow Today website
:::
:::

::: {.fragment fragment-index="2"}
2.  Create interactive visualizations
:::

::: {.fragment fragment-index="3"}
3.  Improve data usability through tutorials in Python
:::
:::
:::

## Website Recommendations {.smaller}

**website architecture**

![](images/website_architechture1.png){width="100%"}

## Website Recommendations {.smaller}

::: columns
::: {.column width="50%"}
![](images/wireframe1.png){width="1515"}
:::

::: {.column width="50%"}
![](images/wireframe2.png)
:::
:::

## Objectives {.smaller}

::: columns
::: {.column width="30%"}
![](images/snowy_tree.jpg){width="338"}
:::

::: {.column width="70%"}
**Create an open source workflow for processing and visualizing snow data**

1.  Provide recommendations for the Snow Today website

[2. Create interactive visualizations]{.bright_blue}

3.  Improve data usability through tutorials in Python
:::
:::

## Interactive Visualizations {.smaller}

::: columns
::: {.column width="40%"}
**Prototype Web Application**

<br> <br> Daily maps of snow cover and albedo for any selected date
:::

::: {.column width="60%"}
![](images/daily_snow.gif){.absolute right="0%"}
:::
:::

## Interactive Visualizations {.smaller}

::: columns
::: {.column width="40%"}
**Monthly Average and Anomaly**

<br> <br> Users can select a specific month, water year, and variable to view averages on anomalies.
:::

::: {.column width="60%"}
![](images/monthly_snow.gif){.absolute right="0%"}
:::
:::

## Interactive Visualizations {.smaller}

**Annual Comparisons**

![](images/annual_snow.gif)

## Interactive Visualizations {.smaller}

::: panel-tabset
### graph

```{python}
#| include: false
snow_cover_df = pd.read_csv('data/snow_cover_df.csv')
snow_cover_df = snow_cover_df.fillna(0)

# Create empty list to input with for loop
IQR_25 = []
IQR_75 = []
IQR_50 = []
days = []
for i in range(len(snow_cover_df)): 
    #Takes the IQR of each day (25, 50, 75)
    Q1 = np.percentile(snow_cover_df.iloc[i], 25)
    Q2 = np.percentile(snow_cover_df.iloc[i], 50)
    Q3 = np.percentile(snow_cover_df.iloc[i], 75)
    #appends list with IQR outputs
    IQR_25.append(Q1)
    IQR_50.append(Q2)
    IQR_75.append(Q3)
    #Creates day list to append dataset with
    days.append(i + 1)
    
# Next, need to create a single column of mean values. 
snow_cover_df['Average Snow Cover'] = snow_cover_df.mean(axis = 1)

#Appends list for loop lists
snow_cover_df['IQR_25'] = IQR_25
snow_cover_df['IQR_75'] = IQR_75
snow_cover_df['IQR_50'] = IQR_50
snow_cover_df['days'] = days

month_day = [31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30]
new_list = []

j = 0 
for i in range(0,len(month_day)):
    j+=month_day[i]
    new_list.append(j)
    
# Create a list of years to graph. legend rank allows lets you order where the lines are located on the chart. 
for i in range(len(snow_cover_df)):
    print("""go.Scatter("""
        """name = '""" + str(i + 2001) + """', """
        """y = snow_cover_df['"""+ str(i + 2001) + """'], x = snow_cover_df['days'], """
        """mode = 'lines', legendrank = """ + str(19-i) + """),"""
    )
```

```{python}
#| include: false
#Plot the figure. 
fig = go.Figure([

#create median line
go.Scatter(
    name = 'Median',
    y = snow_cover_df['IQR_50'],
    x = snow_cover_df['days'],
    mode = 'lines',
    legendgroup = 'IQR',
    legendgrouptitle_text="<b>Interquartile Range</b>",
    legendrank = 20,
    line=dict(color='rgb(31, 119, 180)'),
),
#Create IQR 75 line
go.Scatter(
        name = 'IQR 75', y = snow_cover_df['IQR_75'], x = snow_cover_df['days'],
        mode='lines', marker=dict(color="#444"), line=dict(width=0),
        legendgroup = 'IQR', showlegend = False # Here we 'hide' the name from appearing on the legend since it's lumped in with the legendgroup 'IQR'
    ),
    #Create IQR 25 fill color
    go.Scatter(
        name='IQR 25', y = snow_cover_df['IQR_25'], x = snow_cover_df['days'],
        marker=dict(color="#444"), line=dict(width=0),  mode='lines',
        fillcolor='rgba(68, 68, 68, 0.3)', fill='tonexty',
        legendgroup = 'IQR', showlegend = False
    ),
    #Create mean line
    go.Scatter(
        name = 'Average Snow Cover',  y = snow_cover_df['Average Snow Cover'], x = snow_cover_df['days'],
        mode = 'lines', legendgroup = 'Average',
        legendgrouptitle_text = '<b>Average</b>', legendrank = 21
    ),
#Create lines for each respective year
go.Scatter(name = '2001', y = snow_cover_df['2001'], x = snow_cover_df['days'], mode = 'lines', legendrank = 19),
go.Scatter(name = '2002', y = snow_cover_df['2002'], x = snow_cover_df['days'], mode = 'lines', legendrank = 18),
go.Scatter(name = '2003', y = snow_cover_df['2003'], x = snow_cover_df['days'], mode = 'lines', legendrank = 17),
go.Scatter(name = '2004', y = snow_cover_df['2004'], x = snow_cover_df['days'], mode = 'lines', legendrank = 16),
go.Scatter(name = '2005', y = snow_cover_df['2005'], x = snow_cover_df['days'], mode = 'lines', legendrank = 15),
go.Scatter(name = '2006', y = snow_cover_df['2006'], x = snow_cover_df['days'], mode = 'lines', legendrank = 14),
go.Scatter(name = '2007', y = snow_cover_df['2007'], x = snow_cover_df['days'], mode = 'lines', legendrank = 13),
go.Scatter(name = '2008', y = snow_cover_df['2008'], x = snow_cover_df['days'], mode = 'lines', legendrank = 12),
go.Scatter(name = '2009', y = snow_cover_df['2009'], x = snow_cover_df['days'], mode = 'lines', legendrank = 11),
go.Scatter(name = '2010', y = snow_cover_df['2010'], x = snow_cover_df['days'], mode = 'lines', legendrank = 10),
go.Scatter(name = '2011', y = snow_cover_df['2011'], x = snow_cover_df['days'], mode = 'lines', legendrank = 9),
go.Scatter(name = '2012', y = snow_cover_df['2012'], x = snow_cover_df['days'], mode = 'lines', legendrank = 8),
go.Scatter(name = '2013', y = snow_cover_df['2013'], x = snow_cover_df['days'], mode = 'lines', legendrank = 7),
go.Scatter(name = '2014', y = snow_cover_df['2014'], x = snow_cover_df['days'], mode = 'lines', legendrank = 6),
go.Scatter(name = '2015', y = snow_cover_df['2015'], x = snow_cover_df['days'], mode = 'lines', legendrank = 5),
go.Scatter(name = '2016', y = snow_cover_df['2016'], x = snow_cover_df['days'], mode = 'lines', legendrank = 4),
go.Scatter(name = '2017', y = snow_cover_df['2017'], x = snow_cover_df['days'], mode = 'lines', legendrank = 3),
go.Scatter(name = '2018', y = snow_cover_df['2018'], x = snow_cover_df['days'], mode = 'lines', legendrank = 2),
go.Scatter(name = '2019', y = snow_cover_df['2019'], x = snow_cover_df['days'], mode = 'lines', legendrank = 1)

])
# Can change default "off" variables. Right now, the only variable visible is year_2019 and IQR
variables_to_hide = [
'2001', '2002', '2003',
'2004', '2005', '2006', '2007',
'2008', '2009', '2010', '2011',
'2012', '2013', '2014', '2015',
# '2016', '2017', '2018', '2019',
'Average Snow Cover', 'Median']
fig.for_each_trace(lambda trace: trace.update(visible="legendonly") 
                   if trace.name in variables_to_hide else ())
fig.update_layout(
    title = "<b> Annual Snow Cover Area: Sierra Nevada Region </b> <br> <sup>2001-2019</sup></br>",
    legend_title="<b>Year</b>",
    autosize=False,
    width=1050,
    height=550,
    template = 'none',
    font=dict(
        size=16),
xaxis = dict(
        tickmode = 'array',
        tickvals = [1, 31, 61, 92, 123, 151, 182, 212, 243, 273, 304, 335, 365],
        ticktext = ['<b>October</b>', '<b>November</b>', '<b>December</b>', '<b>January</b>', '<b>February</b>', '<b>March</b>', '<b>April</b>', '<b>May</b>', 
        '<b>June</b>', '<b>July', '<b>August</b>', "<b>September</b>", "<b>October</b>"],
        tickfont = dict(size=12))
)
fig.update_xaxes(title_text = "", gridcolor = 'lightgrey', gridwidth = 0.1)
```

```{python}
fig.update_yaxes(title_text = "<b> Area (Thousands of Square Kilometers) </b>", 
    title_font = {"size": 15}, gridcolor = 'lightgrey', gridwidth = 0.1)
```

### code

```{python}
#| echo: true
#| eval: false
snow_cover_df = pd.read_csv('data/snow_cover_df.csv')
snow_cover_df = snow_cover_df.fillna(0)

# Create empty list to input with for loop
IQR_25 = []
IQR_75 = []
IQR_50 = []
days = []
for i in range(len(snow_cover_df)): 
    #Takes the IQR of each day (25, 50, 75)
    Q1 = np.percentile(snow_cover_df.iloc[i], 25)
    Q2 = np.percentile(snow_cover_df.iloc[i], 50)
    Q3 = np.percentile(snow_cover_df.iloc[i], 75)
    #appends list with IQR outputs
    IQR_25.append(Q1)
    IQR_50.append(Q2)
    IQR_75.append(Q3)
    #Creates day list to append dataset with
    days.append(i + 1)
    
# Next, need to create a single column of mean values. 
snow_cover_df['Average Snow Cover'] = snow_cover_df.mean(axis = 1)

#Appends list for loop lists
snow_cover_df['IQR_25'] = IQR_25
snow_cover_df['IQR_75'] = IQR_75
snow_cover_df['IQR_50'] = IQR_50
snow_cover_df['days'] = days

month_day = [31, 30, 31, 31, 28, 31, 30, 31, 30, 31, 31, 30]
new_list = []

j = 0 
for i in range(0,len(month_day)):
    j+=month_day[i]
    new_list.append(j)
    
# Create a list of years to graph. legend rank allows lets you order where the lines are located on the chart. 
for i in range(len(snow_cover_df)):
    print("""go.Scatter("""
        """name = '""" + str(i + 2001) + """', """
        """y = snow_cover_df['"""+ str(i + 2001) + """'], x = snow_cover_df['days'], """
        """mode = 'lines', legendrank = """ + str(19-i) + """),"""
    )
#Plot the figure. 
fig = go.Figure([

#create median line
go.Scatter(
    #Name that appears on legend
    name = 'Median',
    # y-dim
    y = snow_cover_df['IQR_50'],
    # x-dim
    x = snow_cover_df['days'],
    # type of plot
    mode = 'lines',
    # Include to select/deselect multiple variables at once
    legendgroup = 'IQR',
    # Name of legend group on legend
    legendgrouptitle_text="<b>Interquartile Range</b>",
    # Legend position
    legendrank = 20,
    # Line color
    line=dict(color='rgb(31, 119, 180)'),
),
#Create IQR 75 line
go.Scatter(
        name = 'IQR 75', y = snow_cover_df['IQR_75'], x = snow_cover_df['days'],
        mode='lines', marker=dict(color="#444"), line=dict(width=0),
        legendgroup = 'IQR', showlegend = False
        # Here we 'hide' the name from appearing on the legend since it's lumped in with the legendgroup 'IQR'
    ),
    #Create IQR 25 fill color
    go.Scatter(
        name='IQR 25', y = snow_cover_df['IQR_25'], x = snow_cover_df['days'],
        marker=dict(color="#444"), line=dict(width=0),  mode='lines',
        fillcolor='rgba(68, 68, 68, 0.3)', fill='tonexty',
        legendgroup = 'IQR', showlegend = False
    ),
    #Create mean line
    go.Scatter(
        name = 'Average Snow Cover',  y = snow_cover_df['Average Snow Cover'], x = snow_cover_df['days'],
        mode = 'lines', legendgroup = 'Average',
        legendgrouptitle_text = '<b>Average</b>', legendrank = 21
    ),
#Create lines for each respective year
go.Scatter(name = '2001', y = snow_cover_df['2001'], x = snow_cover_df['days'], mode = 'lines', legendrank = 19),
go.Scatter(name = '2002', y = snow_cover_df['2002'], x = snow_cover_df['days'], mode = 'lines', legendrank = 18),
go.Scatter(name = '2003', y = snow_cover_df['2003'], x = snow_cover_df['days'], mode = 'lines', legendrank = 17),
go.Scatter(name = '2004', y = snow_cover_df['2004'], x = snow_cover_df['days'], mode = 'lines', legendrank = 16),
go.Scatter(name = '2005', y = snow_cover_df['2005'], x = snow_cover_df['days'], mode = 'lines', legendrank = 15),
go.Scatter(name = '2006', y = snow_cover_df['2006'], x = snow_cover_df['days'], mode = 'lines', legendrank = 14),
go.Scatter(name = '2007', y = snow_cover_df['2007'], x = snow_cover_df['days'], mode = 'lines', legendrank = 13),
go.Scatter(name = '2008', y = snow_cover_df['2008'], x = snow_cover_df['days'], mode = 'lines', legendrank = 12),
go.Scatter(name = '2009', y = snow_cover_df['2009'], x = snow_cover_df['days'], mode = 'lines', legendrank = 11),
go.Scatter(name = '2010', y = snow_cover_df['2010'], x = snow_cover_df['days'], mode = 'lines', legendrank = 10),
go.Scatter(name = '2011', y = snow_cover_df['2011'], x = snow_cover_df['days'], mode = 'lines', legendrank = 9),
go.Scatter(name = '2012', y = snow_cover_df['2012'], x = snow_cover_df['days'], mode = 'lines', legendrank = 8),
go.Scatter(name = '2013', y = snow_cover_df['2013'], x = snow_cover_df['days'], mode = 'lines', legendrank = 7),
go.Scatter(name = '2014', y = snow_cover_df['2014'], x = snow_cover_df['days'], mode = 'lines', legendrank = 6),
go.Scatter(name = '2015', y = snow_cover_df['2015'], x = snow_cover_df['days'], mode = 'lines', legendrank = 5),
go.Scatter(name = '2016', y = snow_cover_df['2016'], x = snow_cover_df['days'], mode = 'lines', legendrank = 4),
go.Scatter(name = '2017', y = snow_cover_df['2017'], x = snow_cover_df['days'], mode = 'lines', legendrank = 3),
go.Scatter(name = '2018', y = snow_cover_df['2018'], x = snow_cover_df['days'], mode = 'lines', legendrank = 2),
go.Scatter(name = '2019', y = snow_cover_df['2019'], x = snow_cover_df['days'], mode = 'lines', legendrank = 1)

])
# Can change default "off" variables. Right now, the only variable visible is year_2019 and IQR
variables_to_hide = ['2001', '2002', '2003', '2004', '2005', '2006', '2007', 
'2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018',
'Average Snow Cover']
fig.for_each_trace(lambda trace: trace.update(visible="legendonly") 
                   if trace.name in variables_to_hide else ())
fig.update_layout(
    title = "<b> Annual Snow Cover Area: Sierra Nevada Region </b> <br> <sup>2001-2019</sup></br>",
    legend_title="<b>Year</b>",
    autosize=False,
    width=1200,
    height=700,
    template = 'none',
    font=dict(
        size=16),
xaxis = dict(
        tickmode = 'array',
        tickvals = [1, 31, 61, 92, 123, 151, 182, 212, 243, 273, 304, 335, 365],
        ticktext = ['<b>October</b>', '<b>November</b>', '<b>December</b>', '<b>January</b>', '<b>February</b>', '<b>March</b>', '<b>April</b>', '<b>May</b>', 
        '<b>June</b>', '<b>July', '<b>August</b>', "<b>September</b>", "<b>October</b>"],
        tickfont = dict(size=12))
)

fig.update_xaxes(title_text = "", gridcolor = 'lightgrey', gridwidth = 0.1)
fig.update_yaxes(title_text = "<b> Area (Thousands of Square Kilometers) </b>", 
    title_font = {"size": 15}, gridcolor = 'lightgrey', gridwidth = 0.1)
```
:::

## Objectives {.smaller}

::: columns
::: {.column width="30%"}
![](images/snowy_tree.jpg){width="338"}
:::

::: {.column width="70%"}
**Create an open source workflow for processing and visualizing snow data**

1.  Provide recommendations for the Snow Today website

2.  Create interactive visualizations

[3. Improve data usability through tutorials in Python]{.bright_blue}
:::
:::

## Tutorials {.smaller}

::: columns
::: {.column width="45%"}
<br> [1. Download and Explore Datasets]{.text_block_blue} <br> <br> <br> <br> [2. Process and Format Data]{.text_block_green} <br> <br> <br> <br> [3. Analyze and Visualize Snow Data]{.text_block_orange}
:::

::: {.column width="55%"}
![](images/tuturial_example.gif){width="624"}
:::
:::

## Tutorials {.smaller}

::: columns
::: {.column width="45%"}
<br> [1. Download and Explore Datasets]{.text_block_blue} <br> <br> <br> <br> [2. Process and Format Data]{.text_block_green_lt} <br> <br> <br> <br> [3. Analyze and Visualize Snow Data]{.text_block_orange_lt}
:::

::: {.column width="55%"}
-   Download snow cover and albedo datasets
-   Open datasets and view metadata
-   Create basic visualizations of each dataset
:::
:::

## Tutorials {.smaller}

::: columns
::: {.column width="45%"}
<br> [1. Download and Explore Datasets]{.text_block_blue_lt} <br> <br> <br> <br> [2. Process and Format Data]{.text_block_green} <br> <br> <br> <br> [3. Analyze and Visualize Snow Data]{.text_block_orange_lt}
:::

::: {.column width="55%"}
-   Process and subset datasets
-   Calculate monthly and yearly snow cover and albedo averages and anomalies
-   Create interactive maps of processed data
-   Convert processed data to GeoTiff and NetCDF formats
:::
:::

## Tutorials {.smaller}

::: columns
::: {.column width="45%"}
<br> [1. Download and Explore Datasets]{.text_block_blue_lt} <br> <br> <br> <br> [2. Process and Format Data]{.text_block_green_lt} <br> <br> <br> <br> [3. Analyze and Visualize Snow Data]{.text_block_orange}
:::

::: {.column width="55%"}
-   Calculate total snow cover area and average albedo for entire spatial domain
-   Perform basic statistical analysis of datasets
-   Develop interactive charts to compare snow cover area and albedo percentages for each water year
:::
:::

## Contributions

![](images/contributions_png.png)

##  {background-image="images/snow_and_water.jpg" background-size="100%"}

[As water resources become harder to manage due to climate change, implementing these tools will open a valuable dataset to a wider audience]{.big_centered_text .absolute top="0%" width="100%"}

## Acknowledgements {.smaller}

**Faculty Advisors**

Sam Stevenson, UCSB Bren School

Allison Horst, UCSB Bren School

**Clients**

Timbo Stillinger, UCSB Earth Research Institute

Ned Bair, UCSB Earth Research Institute

Karl Rittger, CU Boulder Institute of Arctic & Alpine Research

**External Advisors**

James Frew, UCSB Bren School

Niklas Griessbaum, UCSB Bren School

Kat Le, UCSB Bren School

Michael Colee, UCSB Geography & Earth Research Institute

**Bren School Faculty and Staff and the MEDS 2022 cohort**


