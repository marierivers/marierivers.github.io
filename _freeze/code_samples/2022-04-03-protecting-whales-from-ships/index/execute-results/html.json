{
  "hash": "11cb11f0363e8cad1db8a8f94c8bc771",
  "result": {
    "markdown": "---\ntitle: \"Protecting Whales from Ships\"\ndescription: \"A spatial analysis using Python and GeoPandas\"\nauthor:\n  - name: Marie Rivers\n    url: https://marierivers.github.io/\ndate: 2022-04-03\ncategories: [Python, geopandas, statial analysis]\ncitation: \n  url: https://marierivers.github.io/code_samples/2022-04-03-protecting-whales-from-ships/ \n#image: \ndraft: false\neditor: visual\ntoc-title: Contents\ntoc-location: left\ntoc-depth: 2\ncode-tools: \n  source: true\n  toggle: true\n  caption: view code\ncode-block-bg: true\n# code-block-border-left: \"#31BAE9\"\n---\n\n\nThis analysis identifies a speed reduction zone off the island of Dominica for the purpose of reducing the occurrence of ships striking whales and quantifies the impact of reduced travel speeds on marine traffic.\n\n# Setup\n\nLoad libraries and packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport geopandas as gpd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Library/Frameworks/R.framework/Versions/4.1/Resources/library/reticulate/python/rpytools/loader.py:39: UserWarning: Shapely 2.0 is installed, but because PyGEOS is also installed, GeoPandas will still use PyGEOS by default for now. To force to use and test Shapely 2.0, you have to set the environment variable USE_PYGEOS=0. You can do this before starting the Python process, or in your code before importing geopandas:\n\nimport os\nos.environ['USE_PYGEOS'] = '0'\nimport geopandas\n\nIn a future release, GeoPandas will switch to using Shapely by default. If you are using PyGEOS directly (calling PyGEOS functions on geometries from GeoPandas), this will then stop working and you are encouraged to migrate from PyGEOS to Shapely 2.0 (https://shapely.readthedocs.io/en/latest/migration_pygeos.html).\n  module = _import(\n```\n:::\n\n```{.python .cell-code}\nimport os\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport shapely\nimport contextily as ctx\nimport pygeos\n```\n:::\n\n\n# Dominica outline\n\nRead in a shapefile that contains the outline of the country of Dominica.\n\n\n::: {.cell .column-page-right}\n\n```{.python .cell-code}\n# Define path to folder\ninput_folder = r\"data/dominica\"\n\n# Join folder path and filename \nfp = os.path.join(input_folder, \"dma_admn_adm0_py_s1_dominode_v2.shp\")\n\n# Print out the full file path\nprint(fp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata/dominica/dma_admn_adm0_py_s1_dominode_v2.shp\n```\n:::\n:::\n\n\n    data/dominica/dma_admn_adm0_py_s1_dominode_v2.shp\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Read file using gpd.read_file()\ndominica = gpd.read_file(fp)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# check the object type\ntype(dominica)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndominica.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  ADM0_PCODE   ADM0_EN                                           geometry\n0         DM  Dominica  POLYGON ((-61.43023 15.63952, -61.43019 15.639...\n```\n:::\n:::\n\n\nFrom the `head()` function, we can see that geodataframe consists of one row.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# check the coordinate reference system\ndominica.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Geographic 2D CRS: EPSG:4326>\nName: WGS 84\nAxis Info [ellipsoidal]:\n- Lat[north]: Geodetic latitude (degree)\n- Lon[east]: Geodetic longitude (degree)\nArea of Use:\n- name: World.\n- bounds: (-180.0, -90.0, 180.0, 90.0)\nDatum: World Geodetic System 1984 ensemble\n- Ellipsoid: WGS 84\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n::: {.cell .column-page-right}\n\n```{.python .cell-code}\n# change the projection to Dominica 1945 / British West Indies Grid (metric units)\nproj_area_crs = 2002 # project area coordinate system EPSG code. Projected CRS for Dominica is 2002\ndominica = dominica.to_crs(epsg=proj_area_crs)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# check the coordinate reference system again to make sure the conversion worked\ndominica.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Derived Projected CRS: EPSG:2002>\nName: Dominica 1945 / British West Indies Grid\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Dominica - onshore.\n- bounds: (-61.55, 15.14, -61.2, 15.69)\nCoordinate Operation:\n- name: British West Indies Grid\n- method: Transverse Mercator\nDatum: Dominica 1945\n- Ellipsoid: Clarke 1880 (RGS)\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n\n# Plot the Dominica outline\n\n\n::: {.cell}\n\n```{.python .cell-code}\nax = dominica.plot(color=\"none\", figsize=(9, 9))\nctx.add_basemap(ax, crs=dominica.crs.to_string())\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=864}\n:::\n:::\n\n\n# Whale sighting data\n\nWhale habitat was approximated using data from approximately 5,000 whale sightings between 2008 and 2015.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Define path to folder\ninput_folder2 = r\"data\"\n\n# Join folder path and filename \nfp2 = os.path.join(input_folder2, \"sightings2005_2018.csv\")\n\n# Print out the full file path\nprint(fp2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata/sightings2005_2018.csv\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Read file using gpd.read_file()\nwhales = gpd.read_file(fp2)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(whales)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwhales.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  field_1              GPStime          Lat          Long geometry\n0       0  2005-01-15 07:43:27  15.36977117  -61.49328433     None\n1       1  2005-01-15 08:07:13   15.3834075    -61.503702     None\n2       2  2005-01-15 08:31:17  15.38106333  -61.50486067     None\n3       3  2005-01-15 09:19:10  15.33532083  -61.46858117     None\n4       4  2005-01-15 10:08:00    15.294224  -61.45318517     None\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# bootstrap the geometries\nwhale_points = gpd.points_from_xy(whales['Long'], whales['Lat'])\nwhale_gdf = gpd.GeoDataFrame(whales, geometry=whale_points)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwhale_gdf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  field_1              GPStime  ...          Long                    geometry\n0       0  2005-01-15 07:43:27  ...  -61.49328433  POINT (-61.49328 15.36977)\n1       1  2005-01-15 08:07:13  ...    -61.503702  POINT (-61.50370 15.38341)\n2       2  2005-01-15 08:31:17  ...  -61.50486067  POINT (-61.50486 15.38106)\n3       3  2005-01-15 09:19:10  ...  -61.46858117  POINT (-61.46858 15.33532)\n4       4  2005-01-15 10:08:00  ...  -61.45318517  POINT (-61.45319 15.29422)\n\n[5 rows x 5 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(whale_gdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# project the dataset into an appropriate CRS\nwhale_gdf = whale_gdf.set_crs(epsg=4326)\nwhale_gdf = whale_gdf.to_crs(epsg=proj_area_crs)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwhale_gdf.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Derived Projected CRS: EPSG:2002>\nName: Dominica 1945 / British West Indies Grid\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Dominica - onshore.\n- bounds: (-61.55, 15.14, -61.2, 15.69)\nCoordinate Operation:\n- name: British West Indies Grid\n- method: Transverse Mercator\nDatum: Dominica 1945\n- Ellipsoid: Clarke 1880 (RGS)\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(15,15), dpi=100)\n\nwhale_gdf.plot(ax=ax)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-3.png){width=1440}\n:::\n:::\n\n\n# Create grid\n\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, ymin, xmax, ymax = whale_gdf.total_bounds\n\ncell_size = 2000\nlength = 2000\nwidth = 2000\n\nxs = list(np.arange(xmin, xmax + width, width)) # return evenly spaced values starting at xmin, stopping (but not including) at xmax+width, by a step of width\nys = list(np.arange(ymin, ymax + length, length))\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nxmin, ymin, xmax, ymax\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(408480.65208368783, 1532792.7459409237, 498500.3049570159, 1796964.3997029224)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# function to convert corner points into a cell polygon\ndef make_cell(x, y, cell_size):\n    ring = [\n        (x, y),\n        (x + cell_size, y),\n        (x + cell_size, y + cell_size),\n        (x, y + cell_size)\n    ]\n    cell = shapely.geometry.Polygon(ring)\n    return cell\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# iterate over each combination of x and y coordinates in two nested for loops\ncells = []\nfor x in xs:\n    for y in ys:\n        cell = make_cell(x, y, cell_size)\n        cells.append(cell)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngrid = gpd.GeoDataFrame({'geometry':cells}, crs=proj_area_crs)\n#grid.to_file(\"grid.shp\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngrid.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                            geometry\n0  POLYGON ((408480.652 1532792.746, 410480.652 1...\n1  POLYGON ((408480.652 1534792.746, 410480.652 1...\n2  POLYGON ((408480.652 1536792.746, 410480.652 1...\n3  POLYGON ((408480.652 1538792.746, 410480.652 1...\n4  POLYGON ((408480.652 1540792.746, 410480.652 1...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngrid.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Derived Projected CRS: EPSG:2002>\nName: Dominica 1945 / British West Indies Grid\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Dominica - onshore.\n- bounds: (-61.55, 15.14, -61.2, 15.69)\nCoordinate Operation:\n- name: British West Indies Grid\n- method: Transverse Mercator\nDatum: Dominica 1945\n- Ellipsoid: Clarke 1880 (RGS)\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfig, ax = plt.subplots(figsize=(10,10), dpi=100)\n\ngrid.boundary.plot(ax=ax, linewidth = 0.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-5.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbase = dominica.plot(facecolor='none', edgecolor='black', linewidth=2, figsize=(15, 15))\nwhale_gdf.plot(ax=base, facecolor='red', markersize=2)\ngrid.boundary.plot(ax=base, linewidth = 0.5)\nctx.add_basemap(ax=base, crs=dominica.crs.to_string())\n```\n:::\n\n\n# Extract whale habitat\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# spatially join the grid with whale sighting data to count the number of sightings in each cell\n# use an inner join since we're not interested in grid cells without any sightings\nwhale_grid = grid.sjoin(whale_gdf, how=\"inner\")\nwhale_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                               geometry  ...         Long\n124   POLYGON ((408480.652 1780792.746, 410480.652 1...  ...   -61.896866\n124   POLYGON ((408480.652 1780792.746, 410480.652 1...  ...   -61.900766\n124   POLYGON ((408480.652 1780792.746, 410480.652 1...  ...   -61.903366\n125   POLYGON ((408480.652 1782792.746, 410480.652 1...  ...   -61.900116\n125   POLYGON ((408480.652 1782792.746, 410480.652 1...  ...   -61.897716\n...                                                 ...  ...          ...\n5171  POLYGON ((484480.652 1690792.746, 486480.652 1...  ...   -61.194134\n5172  POLYGON ((484480.652 1692792.746, 486480.652 1...  ...    -61.19188\n6030  POLYGON ((498480.652 1532792.746, 500480.652 1...  ...  -61.0794355\n6030  POLYGON ((498480.652 1532792.746, 500480.652 1...  ...  -61.0794355\n6030  POLYGON ((498480.652 1532792.746, 500480.652 1...  ...  -61.0794355\n\n[4893 rows x 6 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwhale_grid.boundary.plot(figsize=(5,10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-7.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwhale_grid.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Derived Projected CRS: EPSG:2002>\nName: Dominica 1945 / British West Indies Grid\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Dominica - onshore.\n- bounds: (-61.55, 15.14, -61.2, 15.69)\nCoordinate Operation:\n- name: British West Indies Grid\n- method: Transverse Mercator\nDatum: Dominica 1945\n- Ellipsoid: Clarke 1880 (RGS)\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngrid['count'] = whale_grid.groupby(whale_grid.index).count()['index_right']\ngrid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                               geometry  count\n0     POLYGON ((408480.652 1532792.746, 410480.652 1...    NaN\n1     POLYGON ((408480.652 1534792.746, 410480.652 1...    NaN\n2     POLYGON ((408480.652 1536792.746, 410480.652 1...    NaN\n3     POLYGON ((408480.652 1538792.746, 410480.652 1...    NaN\n4     POLYGON ((408480.652 1540792.746, 410480.652 1...    NaN\n...                                                 ...    ...\n6293  POLYGON ((500480.652 1790792.746, 502480.652 1...    NaN\n6294  POLYGON ((500480.652 1792792.746, 502480.652 1...    NaN\n6295  POLYGON ((500480.652 1794792.746, 502480.652 1...    NaN\n6296  POLYGON ((500480.652 1796792.746, 502480.652 1...    NaN\n6297  POLYGON ((500480.652 1798792.746, 502480.652 1...    NaN\n\n[6298 rows x 2 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# subset the grid dataframe to cells that have more than 20 sightings\nwhale_mask = (grid['count'] > 20)\nwhale_mask\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0       False\n1       False\n2       False\n3       False\n4       False\n        ...  \n6293    False\n6294    False\n6295    False\n6296    False\n6297    False\nName: count, Length: 6298, dtype: bool\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nwhale_habitat = grid[whale_mask]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nspeed_reduction_zone = whale_habitat.unary_union.convex_hull\nspeed_reduction_zone\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<POLYGON ((460480.652 1680792.746, 456480.652 1682792.746, 454480.652 168479...>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(speed_reduction_zone)\n# need to create a new GeoDataFrame with the speed_reduction_zone as a single feature\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'shapely.geometry.polygon.Polygon'>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nspeed_reduction_zone = gpd.GeoDataFrame(index=[0], crs='epsg:2002', geometry=[speed_reduction_zone])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nspeed_reduction_zone.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Derived Projected CRS: EPSG:2002>\nName: Dominica 1945 / British West Indies Grid\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Dominica - onshore.\n- bounds: (-61.55, 15.14, -61.2, 15.69)\nCoordinate Operation:\n- name: British West Indies Grid\n- method: Transverse Mercator\nDatum: Dominica 1945\n- Ellipsoid: Clarke 1880 (RGS)\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(speed_reduction_zone)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nbase = dominica.plot(facecolor='none', edgecolor='black', linewidth=3, figsize=(15, 15))\nspeed_reduction_zone.plot(ax=base, facecolor='lightgray', edgecolor='red', alpha=0.5, linewidth=5)\nctx.add_basemap(ax=base, crs=dominica.crs.to_string())\n```\n:::\n\n\n# Vessel data\n\nVessel data was obtained from Automatic Identification System (AIS) tranceivers from 2015.\n\n## Load data\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Join folder path and filename \nfp3 = os.path.join(input_folder2, \"station1249.csv\")\n\n# Print out the full file path\nprint(fp3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndata/station1249.csv\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Read file using gpd.read_file()\nvessels = gpd.read_file(fp3)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(vessels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'geopandas.geodataframe.GeoDataFrame'>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nvessels.head\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<bound method NDFrame.head of        field_1       MMSI        LON       LAT            TIMESTAMP geometry\n0            0  233092000  -61.84788  15.23238  2015-05-22 13:53:26     None\n1            1  255803280  -61.74397  15.96114  2015-05-22 13:52:57     None\n2            2  329002300  -61.38968  15.29744  2015-05-22 13:52:32     None\n3            3  257674000  -61.54395   16.2334  2015-05-22 13:52:24     None\n4            4  636092006  -61.52401  15.81954  2015-05-22 13:51:23     None\n...        ...        ...        ...       ...                  ...      ...\n617257  238722  256525000  -61.40679  15.36907  2015-05-21 21:34:59     None\n617258  238723  311077100  -61.37539  15.27406  2015-05-21 21:34:55     None\n617259  238724  377907247  -61.39461  15.30672  2015-05-21 21:34:46     None\n617260  238725  253365000  -61.49001  16.14007  2015-05-21 21:34:46     None\n617261  238726  329002300  -61.48073  15.44751  2015-05-21 21:34:45     None\n\n[617262 rows x 6 columns]>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# bootstrap the geometries\nvessel_points = gpd.points_from_xy(vessels['LON'], vessels['LAT'])\nvessel_gdf = gpd.GeoDataFrame(vessels, geometry=vessel_points)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# project the dataset into an appropriate CRS\nvessel_gdf = vessel_gdf.set_crs(epsg=4326)\nvessel_gdf = vessel_gdf.to_crs(epsg=proj_area_crs)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nvessel_gdf.crs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<Derived Projected CRS: EPSG:2002>\nName: Dominica 1945 / British West Indies Grid\nAxis Info [cartesian]:\n- E[east]: Easting (metre)\n- N[north]: Northing (metre)\nArea of Use:\n- name: Dominica - onshore.\n- bounds: (-61.55, 15.14, -61.2, 15.69)\nCoordinate Operation:\n- name: British West Indies Grid\n- method: Transverse Mercator\nDatum: Dominica 1945\n- Ellipsoid: Clarke 1880 (RGS)\n- Prime Meridian: Greenwich\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nvessel_gdf['TIMESTAMP'] = pd.to_datetime(vessel_gdf['TIMESTAMP'])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nvessel_gdf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  field_1       MMSI  ...           TIMESTAMP                        geometry\n0       0  233092000  ... 2015-05-22 13:53:26  POINT (415373.315 1683307.035)\n1       1  255803280  ... 2015-05-22 13:52:57  POINT (426434.345 1763918.193)\n2       2  329002300  ... 2015-05-22 13:52:32  POINT (464555.392 1690588.725)\n3       3  257674000  ... 2015-05-22 13:52:24  POINT (447770.634 1794068.620)\n4       4  636092006  ... 2015-05-22 13:51:23  POINT (450006.361 1748297.844)\n\n[5 rows x 6 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# plot of all vessel points\n\nvessel_gdf.plot(figsize=(5,10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-9.png){width=480}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# plot of all vessel points\nbase = dominica.plot(facecolor='none', edgecolor='black', linewidth=3, figsize=(15, 15))\nvessel_gdf.plot(ax=base, markersize = 3)\nspeed_reduction_zone.plot(ax=base, edgecolor='red', linewidth=2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-11.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# spatially subset AIS data to only include vessels within identified whale habitat\nvessels_in_whale_habitat = vessel_gdf.sjoin(speed_reduction_zone, how=\"inner\")\nvessels_in_whale_habitat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       field_1       MMSI  ...                        geometry index_right\n2            2  329002300  ...  POINT (464555.392 1690588.725)           0\n7            7  338143127  ...  POINT (463892.452 1694650.397)           0\n13          13  329002300  ...  POINT (464555.389 1690589.831)           0\n15          15  338143015  ...  POINT (463910.683 1694655.978)           0\n16          16  338143127  ...  POINT (463697.964 1694341.275)           0\n...        ...        ...  ...                             ...         ...\n617252  238717  329002300  ...  POINT (453901.647 1709712.916)           0\n617253  238718  338143015  ...  POINT (463915.972 1694683.643)           0\n617255  238720  338143127  ...  POINT (463905.177 1694705.734)           0\n617259  238724  377907247  ...  POINT (464023.288 1691613.624)           0\n617261  238726  329002300  ...  POINT (454741.236 1707161.130)           0\n\n[167411 rows x 7 columns]\n```\n:::\n:::\n\n\n## Calculate distance and speed\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# plot of only vessel points within speed reduction zone\nbase = dominica.plot(facecolor='none', linewidth=3, figsize=(15, 15))\nspeed_reduction_zone.plot(ax=base, facecolor='none', edgecolor='red', linewidth=3)\nvessels_in_whale_habitat.plot(ax=base, markersize = 0.5, facecolor='black')\nctx.add_basemap(ax=base, crs=dominica.crs.to_string())\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# sort vessel dataframe by MMSI and time\nvessels_in_whale_habitat = vessels_in_whale_habitat.sort_values(by=['MMSI', 'TIMESTAMP'])\nvessels_in_whale_habitat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       field_1       MMSI  ...                        geometry index_right\n235025  235025  203106200  ...  POINT (462476.396 1680935.224)           0\n235018  235018  203106200  ...  POINT (462283.995 1681393.698)           0\n235000  235000  203106200  ...  POINT (461936.769 1682722.187)           0\n234989  234989  203106200  ...  POINT (461798.818 1683708.377)           0\n234984  234984  203106200  ...  POINT (461654.150 1683997.765)           0\n...        ...        ...  ...                             ...         ...\n259103  259103  983191049  ...  POINT (465250.372 1690066.434)           0\n259094  259094  983191049  ...  POINT (465243.965 1690054.249)           0\n258954  258954  983191049  ...  POINT (465226.597 1690121.667)           0\n258930  258930  983191049  ...  POINT (465242.895 1690053.140)           0\n258206  258206  983191049  ...  POINT (465272.964 1690049.908)           0\n\n[167411 rows x 7 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# create a copy of the vessel dataframe and shift each observation down one row using `shift()`\nvessels_shift = vessels_in_whale_habitat.copy(deep=True).shift(periods=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n/Users/marierivers/Library/r-miniconda/lib/python3.9/site-packages/geopandas/array.py:1406: UserWarning: CRS not set for some of the concatenation inputs. Setting output's CRS as Dominica 1945 / British West Indies Grid (the single non-null crs provided).\n  warnings.warn(\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# rename shifted column names\nvessels_shift = vessels_shift.rename(columns={\"field_1\": \"field_1_shift\", \"MMSI\": \"MMSI_shift\", \"LON\": \"LON_shift\", \"LAT\": \"LAT_shift\", \"TIMESTAMP\": \"TIMESTAMP_shift\", \"geometry\": \"geometry_shift\", \"index_right\": \"index_right_shift\"})\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# join original dataframe with the shifted copy using `join()`\nvessels_shift_join = vessels_in_whale_habitat.join(vessels_shift).sort_values(by=['MMSI', 'TIMESTAMP'])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# drop all rows in the joined dataframe in which the MMSI of the left is not the same as the one on the right\nvessels_keep = vessels_shift_join.drop(vessels_shift_join[vessels_shift_join['MMSI'] != vessels_shift_join['MMSI_shift']].index)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# set the geometry column\nvessels_keep = vessels_keep.set_geometry(\"geometry\")\nvessels_keep2 = vessels_keep.set_geometry(\"geometry_shift\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# calculate distance between each observation\nvessels_keep['distance_m'] = vessels_keep.distance(vessels_keep2)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# calculate time difference between each observation to the next\nvessels_keep['time'] = vessels_keep['TIMESTAMP'] - vessels_keep['TIMESTAMP_shift']\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# calculate speed\nmeters_per_nm = 1852\n\nvessels_keep['speed_m_per_sec'] = vessels_keep['distance_m'] / vessels_keep['time'].dt.total_seconds()\nvessels_keep['speed_knots'] = vessels_keep['speed_m_per_sec'] * 60 * 60 / meters_per_nm\nvessels_keep['time_10knots_minutes'] = (vessels_keep['distance_m'] * 60 ) / ( meters_per_nm * 10 )\nvessels_keep['time_dif_minutes'] = vessels_keep['time_10knots_minutes'] - (vessels_keep['time'].dt.total_seconds() / 60 )\nvessels_keep\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       field_1       MMSI  ... time_10knots_minutes time_dif_minutes\n235018  235018  203106200  ...             1.610828        -0.889172\n235000  235000  203106200  ...             4.448540        -3.034793\n234989  234989  203106200  ...             3.226109        -1.773891\n234984  234984  203106200  ...             1.048164        -1.468503\n234972  234972  203106200  ...             1.394116        -3.589217\n...        ...        ...  ...                  ...              ...\n259103  259103  983191049  ...             0.043139        -5.940194\n259094  259094  983191049  ...             0.044599        -4.355401\n258954  258954  983191049  ...             0.225548       -55.824452\n258930  258930  983191049  ...             0.228202       -11.471798\n258206  258206  983191049  ...             0.097976      -248.585358\n\n[166255 rows x 20 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nvessels_keep = vessels_keep.sort_values(by=['speed_knots'], ascending=False)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# look at the vessels that would be affected by the speed reduction zone\nvessels_going_too_fast = vessels_keep.drop(vessels_keep[vessels_keep['time_dif_minutes'] < 0].index)\nvessels_going_too_fast\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       field_1       MMSI  ... time_10knots_minutes time_dif_minutes\n585844  207309  341387000  ...             0.209101         0.209101\n67091    67091  227528210  ...             7.979167         6.245834\n66925    66925  228008600  ...            13.481637        10.498303\n499754  121219  329002300  ...             8.728323         6.711656\n546817  168282  329002300  ...            12.866650         9.849984\n...        ...        ...  ...                  ...              ...\n616429  237894  636091437  ...             0.000000         0.000000\n616427  237892  636091437  ...             0.000000         0.000000\n616422  237887  636091437  ...             0.000000         0.000000\n616419  237884  636091437  ...             0.000000         0.000000\n616408  237873  636091437  ...             0.000000         0.000000\n\n[21410 rows x 20 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nshipping_impact_minutes = vessels_going_too_fast['time_dif_minutes'].sum()\nshipping_impact_days = round(shipping_impact_minutes / ( 60 * 24), 2)\nshipping_impact_days\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n27.88\n```\n:::\n:::\n\n\n**A 10-knot reduced speed zone in the identified whale habitat will increase travel time by approximately 27.88 days.**\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}